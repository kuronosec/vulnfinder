/*
 * generated by Xtext
 */
package edu.udea.vulnfinder.gram.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SecLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SecurityTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.udea.vulnfinder.gram.SecLanguage.SecurityTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSecurityTestKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdEStringParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cToesKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cScopeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cScopeTargetOfEvaluationParserRuleCall_4_2_0 = (RuleCall)cScopeAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAttacksKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPossibleAttacksAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPossibleAttacksAttackParserRuleCall_5_2_0 = (RuleCall)cPossibleAttacksAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cNotesKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cNoteAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cNoteNoteParserRuleCall_6_2_0 = (RuleCall)cNoteAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
		//SecurityTest Test:
		//	{Test}
		//	'('
		//	'securityTest' id=EString ('(' 'toes' scope=TargetOfEvaluation ')')? ('(' 'attacks' possibleAttacks+=Attack+ ')')?
		//	('(' 'notes' note=Note ')')?
		//	')'
		@Override public ParserRule getRule() { return rule; }

		//{Test} '(' 'securityTest' id=EString ('(' 'toes' scope=TargetOfEvaluation ')')? ('(' 'attacks' possibleAttacks+=Attack+
		//')')? ('(' 'notes' note=Note ')')? ')'
		public Group getGroup() { return cGroup; }

		//{Test}
		public Action getTestAction_0() { return cTestAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//'securityTest'
		public Keyword getSecurityTestKeyword_2() { return cSecurityTestKeyword_2; }

		//id=EString
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//EString
		public RuleCall getIdEStringParserRuleCall_3_0() { return cIdEStringParserRuleCall_3_0; }

		//('(' 'toes' scope=TargetOfEvaluation ')')?
		public Group getGroup_4() { return cGroup_4; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//'toes'
		public Keyword getToesKeyword_4_1() { return cToesKeyword_4_1; }

		//scope=TargetOfEvaluation
		public Assignment getScopeAssignment_4_2() { return cScopeAssignment_4_2; }

		//TargetOfEvaluation
		public RuleCall getScopeTargetOfEvaluationParserRuleCall_4_2_0() { return cScopeTargetOfEvaluationParserRuleCall_4_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//('(' 'attacks' possibleAttacks+=Attack+ ')')?
		public Group getGroup_5() { return cGroup_5; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//'attacks'
		public Keyword getAttacksKeyword_5_1() { return cAttacksKeyword_5_1; }

		//possibleAttacks+=Attack+
		public Assignment getPossibleAttacksAssignment_5_2() { return cPossibleAttacksAssignment_5_2; }

		//Attack
		public RuleCall getPossibleAttacksAttackParserRuleCall_5_2_0() { return cPossibleAttacksAttackParserRuleCall_5_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }

		//('(' 'notes' note=Note ')')?
		public Group getGroup_6() { return cGroup_6; }

		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//'notes'
		public Keyword getNotesKeyword_6_1() { return cNotesKeyword_6_1; }

		//note=Note
		public Assignment getNoteAssignment_6_2() { return cNoteAssignment_6_2; }

		//Note
		public RuleCall getNoteNoteParserRuleCall_6_2_0() { return cNoteNoteParserRuleCall_6_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }

		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.udea.vulnfinder.gram.SecLanguage.Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNoteTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteTextEStringParserRuleCall_1_0 = (RuleCall)cNoteTextAssignment_1.eContents().get(0);
		
		//Note:
		//	{Note} noteText=EString;
		@Override public ParserRule getRule() { return rule; }

		//{Note} noteText=EString
		public Group getGroup() { return cGroup; }

		//{Note}
		public Action getNoteAction_0() { return cNoteAction_0; }

		//noteText=EString
		public Assignment getNoteTextAssignment_1() { return cNoteTextAssignment_1; }

		//EString
		public RuleCall getNoteTextEStringParserRuleCall_1_0() { return cNoteTextEStringParserRuleCall_1_0; }
	}

	public class TargetOfEvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.udea.vulnfinder.gram.SecLanguage.TargetOfEvaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetOfEvaluationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cToeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDomainAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDomainEStringParserRuleCall_2_1_0 = (RuleCall)cDomainAssignment_2_1.eContents().get(0);
		private final Assignment cComponentsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cComponentsWebComponentParserRuleCall_2_2_0 = (RuleCall)cComponentsAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TargetOfEvaluation:
		//	{TargetOfEvaluation}
		//	'(' ('toe' domain=EString components+=WebComponent*)
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//{TargetOfEvaluation} '(' ('toe' domain=EString components+=WebComponent*) ')'
		public Group getGroup() { return cGroup; }

		//{TargetOfEvaluation}
		public Action getTargetOfEvaluationAction_0() { return cTargetOfEvaluationAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//('toe' domain=EString components+=WebComponent*)
		public Group getGroup_2() { return cGroup_2; }

		//'toe'
		public Keyword getToeKeyword_2_0() { return cToeKeyword_2_0; }

		//domain=EString
		public Assignment getDomainAssignment_2_1() { return cDomainAssignment_2_1; }

		//EString
		public RuleCall getDomainEStringParserRuleCall_2_1_0() { return cDomainEStringParserRuleCall_2_1_0; }

		//components+=WebComponent*
		public Assignment getComponentsAssignment_2_2() { return cComponentsAssignment_2_2; }

		//WebComponent
		public RuleCall getComponentsWebComponentParserRuleCall_2_2_0() { return cComponentsWebComponentParserRuleCall_2_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AttackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.udea.vulnfinder.gram.SecLanguage.Attack");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttackAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAttackKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cLevelKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cSeverityAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cSeverityESeverityEnumRuleCall_2_2_2_0 = (RuleCall)cSeverityAssignment_2_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attack:
		//	{Attack}
		//	'(' ('attack' name=EString ('{' ':level' severity=ESeverity '}')?)
		//	//('attack' name=EAttackMethod ('{' ':level' severity=ESeverity '}')?   )
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//{Attack} '(' ('attack' name=EString ('{' ':level' severity=ESeverity '}')?) //('attack' name=EAttackMethod ('{' ':level' severity=ESeverity '}')?   )
		//')'
		public Group getGroup() { return cGroup; }

		//{Attack}
		public Action getAttackAction_0() { return cAttackAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//('attack' name=EString ('{' ':level' severity=ESeverity '}')?)
		public Group getGroup_2() { return cGroup_2; }

		//'attack'
		public Keyword getAttackKeyword_2_0() { return cAttackKeyword_2_0; }

		//name=EString
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_1_0() { return cNameEStringParserRuleCall_2_1_0; }

		//('{' ':level' severity=ESeverity '}')?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_2_0() { return cLeftCurlyBracketKeyword_2_2_0; }

		//':level'
		public Keyword getLevelKeyword_2_2_1() { return cLevelKeyword_2_2_1; }

		//severity=ESeverity
		public Assignment getSeverityAssignment_2_2_2() { return cSeverityAssignment_2_2_2; }

		//ESeverity
		public RuleCall getSeverityESeverityEnumRuleCall_2_2_2_0() { return cSeverityESeverityEnumRuleCall_2_2_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2_3() { return cRightCurlyBracketKeyword_2_2_3; }

		////('attack' name=EAttackMethod ('{' ':level' severity=ESeverity '}')?   )
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.udea.vulnfinder.gram.SecLanguage.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class WebComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.udea.vulnfinder.gram.SecLanguage.WebComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWebComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPageKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPathAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPathEStringParserRuleCall_2_1_0 = (RuleCall)cPathAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cTargetKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final RuleCall cEStringParserRuleCall_2_2_3 = (RuleCall)cGroup_2_2.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_2_2_4 = (Keyword)cGroup_2_2.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_2_2_5 = (Keyword)cGroup_2_2.eContents().get(5);
		private final Assignment cInputsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cInputsInputParserRuleCall_2_3_0 = (RuleCall)cInputsAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WebComponent:
		//	{WebComponent}
		//	'(' ('page' path=EString ('{' ':target' '[' EString* ']' '}')? inputs+=Input*)
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//{WebComponent} '(' ('page' path=EString ('{' ':target' '[' EString* ']' '}')? inputs+=Input*) ')'
		public Group getGroup() { return cGroup; }

		//{WebComponent}
		public Action getWebComponentAction_0() { return cWebComponentAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//('page' path=EString ('{' ':target' '[' EString* ']' '}')? inputs+=Input*)
		public Group getGroup_2() { return cGroup_2; }

		//'page'
		public Keyword getPageKeyword_2_0() { return cPageKeyword_2_0; }

		//path=EString
		public Assignment getPathAssignment_2_1() { return cPathAssignment_2_1; }

		//EString
		public RuleCall getPathEStringParserRuleCall_2_1_0() { return cPathEStringParserRuleCall_2_1_0; }

		//('{' ':target' '[' EString* ']' '}')?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_2_0() { return cLeftCurlyBracketKeyword_2_2_0; }

		//':target'
		public Keyword getTargetKeyword_2_2_1() { return cTargetKeyword_2_2_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_2_2() { return cLeftSquareBracketKeyword_2_2_2; }

		//EString*
		public RuleCall getEStringParserRuleCall_2_2_3() { return cEStringParserRuleCall_2_2_3; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_2_4() { return cRightSquareBracketKeyword_2_2_4; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2_5() { return cRightCurlyBracketKeyword_2_2_5; }

		//inputs+=Input*
		public Assignment getInputsAssignment_2_3() { return cInputsAssignment_2_3; }

		//Input
		public RuleCall getInputsInputParserRuleCall_2_3_0() { return cInputsInputParserRuleCall_2_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.udea.vulnfinder.gram.SecLanguage.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFieldKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAttacksAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cAttacksAttackCrossReference_2_2_1_0 = (CrossReference)cAttacksAssignment_2_2_1.eContents().get(0);
		private final RuleCall cAttacksAttackEStringParserRuleCall_2_2_1_0_1 = (RuleCall)cAttacksAttackCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Input:
		//	{Input}
		//	'(' ('field' name=EString ('[' attacks+=[Attack|EString]* ']')?)
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//{Input} '(' ('field' name=EString ('[' attacks+=[Attack|EString]* ']')?) ')'
		public Group getGroup() { return cGroup; }

		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//('field' name=EString ('[' attacks+=[Attack|EString]* ']')?)
		public Group getGroup_2() { return cGroup_2; }

		//'field'
		public Keyword getFieldKeyword_2_0() { return cFieldKeyword_2_0; }

		//name=EString
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_1_0() { return cNameEStringParserRuleCall_2_1_0; }

		//('[' attacks+=[Attack|EString]* ']')?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_2_0() { return cLeftSquareBracketKeyword_2_2_0; }

		//attacks+=[Attack|EString]*
		public Assignment getAttacksAssignment_2_2_1() { return cAttacksAssignment_2_2_1; }

		//[Attack|EString]
		public CrossReference getAttacksAttackCrossReference_2_2_1_0() { return cAttacksAttackCrossReference_2_2_1_0; }

		//EString
		public RuleCall getAttacksAttackEStringParserRuleCall_2_2_1_0_1() { return cAttacksAttackEStringParserRuleCall_2_2_1_0_1; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_2_2() { return cRightSquareBracketKeyword_2_2_2; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	public class ESeverityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.udea.vulnfinder.gram.SecLanguage.ESeverity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLowEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLowLowKeyword_0_0 = (Keyword)cLowEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMediumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMediumMediumKeyword_1_0 = (Keyword)cMediumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHighEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHighHighKeyword_2_0 = (Keyword)cHighEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ESeverity:
		//	Low | Medium | High;
		public EnumRule getRule() { return rule; }

		//Low | Medium | High
		public Alternatives getAlternatives() { return cAlternatives; }

		//Low
		public EnumLiteralDeclaration getLowEnumLiteralDeclaration_0() { return cLowEnumLiteralDeclaration_0; }

		//'Low'
		public Keyword getLowLowKeyword_0_0() { return cLowLowKeyword_0_0; }

		//Medium
		public EnumLiteralDeclaration getMediumEnumLiteralDeclaration_1() { return cMediumEnumLiteralDeclaration_1; }

		//'Medium'
		public Keyword getMediumMediumKeyword_1_0() { return cMediumMediumKeyword_1_0; }

		//High
		public EnumLiteralDeclaration getHighEnumLiteralDeclaration_2() { return cHighEnumLiteralDeclaration_2; }

		//'High'
		public Keyword getHighHighKeyword_2_0() { return cHighHighKeyword_2_0; }
	}

	public class EAttackMethodElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.udea.vulnfinder.gram.SecLanguage.EAttackMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSQLInjectionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSQLInjectionSQLInjectionKeyword_0_0 = (Keyword)cSQLInjectionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cXSSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cXSSXSSKeyword_1_0 = (Keyword)cXSSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAuthenticationEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAuthenticationAuthenticationKeyword_2_0 = (Keyword)cAuthenticationEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAuthorizationEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAuthorizationAuthorizationKeyword_3_0 = (Keyword)cAuthorizationEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPrivilegeScalationEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPrivilegeScalationPrivilegeScalationKeyword_4_0 = (Keyword)cPrivilegeScalationEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum EAttackMethod:
		//	SQLInjection | XSS | Authentication | Authorization | PrivilegeScalation;
		public EnumRule getRule() { return rule; }

		//SQLInjection | XSS | Authentication | Authorization | PrivilegeScalation
		public Alternatives getAlternatives() { return cAlternatives; }

		//SQLInjection
		public EnumLiteralDeclaration getSQLInjectionEnumLiteralDeclaration_0() { return cSQLInjectionEnumLiteralDeclaration_0; }

		//'SQLInjection'
		public Keyword getSQLInjectionSQLInjectionKeyword_0_0() { return cSQLInjectionSQLInjectionKeyword_0_0; }

		//XSS
		public EnumLiteralDeclaration getXSSEnumLiteralDeclaration_1() { return cXSSEnumLiteralDeclaration_1; }

		//'XSS'
		public Keyword getXSSXSSKeyword_1_0() { return cXSSXSSKeyword_1_0; }

		//Authentication
		public EnumLiteralDeclaration getAuthenticationEnumLiteralDeclaration_2() { return cAuthenticationEnumLiteralDeclaration_2; }

		//'Authentication'
		public Keyword getAuthenticationAuthenticationKeyword_2_0() { return cAuthenticationAuthenticationKeyword_2_0; }

		//Authorization
		public EnumLiteralDeclaration getAuthorizationEnumLiteralDeclaration_3() { return cAuthorizationEnumLiteralDeclaration_3; }

		//'Authorization'
		public Keyword getAuthorizationAuthorizationKeyword_3_0() { return cAuthorizationAuthorizationKeyword_3_0; }

		//PrivilegeScalation
		public EnumLiteralDeclaration getPrivilegeScalationEnumLiteralDeclaration_4() { return cPrivilegeScalationEnumLiteralDeclaration_4; }

		//'PrivilegeScalation'
		public Keyword getPrivilegeScalationPrivilegeScalationKeyword_4_0() { return cPrivilegeScalationPrivilegeScalationKeyword_4_0; }
	}
	
	private final SecurityTestElements pSecurityTest;
	private final NoteElements pNote;
	private final TargetOfEvaluationElements pTargetOfEvaluation;
	private final AttackElements pAttack;
	private final EStringElements pEString;
	private final WebComponentElements pWebComponent;
	private final InputElements pInput;
	private final ESeverityElements eESeverity;
	private final EAttackMethodElements eEAttackMethod;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SecLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSecurityTest = new SecurityTestElements();
		this.pNote = new NoteElements();
		this.pTargetOfEvaluation = new TargetOfEvaluationElements();
		this.pAttack = new AttackElements();
		this.pEString = new EStringElements();
		this.pWebComponent = new WebComponentElements();
		this.pInput = new InputElements();
		this.eESeverity = new ESeverityElements();
		this.eEAttackMethod = new EAttackMethodElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.udea.vulnfinder.gram.SecLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
	//SecurityTest Test:
	//	{Test}
	//	'('
	//	'securityTest' id=EString ('(' 'toes' scope=TargetOfEvaluation ')')? ('(' 'attacks' possibleAttacks+=Attack+ ')')?
	//	('(' 'notes' note=Note ')')?
	//	')'
	public SecurityTestElements getSecurityTestAccess() {
		return pSecurityTest;
	}
	
	public ParserRule getSecurityTestRule() {
		return getSecurityTestAccess().getRule();
	}

	//Note:
	//	{Note} noteText=EString;
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}

	//TargetOfEvaluation:
	//	{TargetOfEvaluation}
	//	'(' ('toe' domain=EString components+=WebComponent*)
	//	')';
	public TargetOfEvaluationElements getTargetOfEvaluationAccess() {
		return pTargetOfEvaluation;
	}
	
	public ParserRule getTargetOfEvaluationRule() {
		return getTargetOfEvaluationAccess().getRule();
	}

	//Attack:
	//	{Attack}
	//	'(' ('attack' name=EString ('{' ':level' severity=ESeverity '}')?)
	//	//('attack' name=EAttackMethod ('{' ':level' severity=ESeverity '}')?   )
	//	')';
	public AttackElements getAttackAccess() {
		return pAttack;
	}
	
	public ParserRule getAttackRule() {
		return getAttackAccess().getRule();
	}

	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//WebComponent:
	//	{WebComponent}
	//	'(' ('page' path=EString ('{' ':target' '[' EString* ']' '}')? inputs+=Input*)
	//	')';
	public WebComponentElements getWebComponentAccess() {
		return pWebComponent;
	}
	
	public ParserRule getWebComponentRule() {
		return getWebComponentAccess().getRule();
	}

	//Input:
	//	{Input}
	//	'(' ('field' name=EString ('[' attacks+=[Attack|EString]* ']')?)
	//	')';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//enum ESeverity:
	//	Low | Medium | High;
	public ESeverityElements getESeverityAccess() {
		return eESeverity;
	}
	
	public EnumRule getESeverityRule() {
		return getESeverityAccess().getRule();
	}

	//enum EAttackMethod:
	//	SQLInjection | XSS | Authentication | Authorization | PrivilegeScalation;
	public EAttackMethodElements getEAttackMethodAccess() {
		return eEAttackMethod;
	}
	
	public EnumRule getEAttackMethodRule() {
		return getEAttackMethodAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
