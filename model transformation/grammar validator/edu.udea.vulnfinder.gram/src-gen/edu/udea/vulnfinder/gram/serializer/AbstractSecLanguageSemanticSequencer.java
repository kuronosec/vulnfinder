/*
 * generated by Xtext
 */
package edu.udea.vulnfinder.gram.serializer;

import com.google.inject.Inject;
import edu.udea.vulnfinder.gram.services.SecLanguageGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import securityTest.Attack;
import securityTest.Input;
import securityTest.SecurityTestPackage;
import securityTest.TargetOfEvaluation;
import securityTest.Test;
import securityTest.WebComponent;

@SuppressWarnings("all")
public abstract class AbstractSecLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SecLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SecurityTestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SecurityTestPackage.ATTACK:
				sequence_Attack(context, (Attack) semanticObject); 
				return; 
			case SecurityTestPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case SecurityTestPackage.TARGET_OF_EVALUATION:
				sequence_TargetOfEvaluation(context, (TargetOfEvaluation) semanticObject); 
				return; 
			case SecurityTestPackage.TEST:
				sequence_SecurityTest(context, (Test) semanticObject); 
				return; 
			case SecurityTestPackage.WEB_COMPONENT:
				sequence_WebComponent(context, (WebComponent) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attack returns Attack
	 *
	 * Constraint:
	 *     (name=EString severity=ESeverity?)
	 */
	protected void sequence_Attack(ISerializationContext context, Attack semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Input returns Input
	 *
	 * Constraint:
	 *     (name=EString attacks+=[Attack|EString]*)
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SecurityTest returns Test
	 *
	 * Constraint:
	 *     (id=EString scope=TargetOfEvaluation? possibleAttacks+=Attack*)
	 */
	protected void sequence_SecurityTest(ISerializationContext context, Test semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TargetOfEvaluation returns TargetOfEvaluation
	 *
	 * Constraint:
	 *     (domain=EString components+=WebComponent*)
	 */
	protected void sequence_TargetOfEvaluation(ISerializationContext context, TargetOfEvaluation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebComponent returns WebComponent
	 *
	 * Constraint:
	 *     (path=EString inputs+=Input*)
	 */
	protected void sequence_WebComponent(ISerializationContext context, WebComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
