/*
 * generated by Xtext
 */
package edu.udea.vulnfinder.gram.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import securityTest.Attack
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import securityTest.SecurityTestPackage
import securityTest.Input

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 */
class SecLanguageScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

	override getScope(EObject context, EReference reference) {
		//println('pos estoy aqui: '+context+" ref; "+reference)
		//println("field i nstance? "+(context instanceof Input))
		// We want to define the Scope for the Element's superElement cross-reference
		if (context instanceof Input && reference == SecurityTestPackage.Literals.INPUT__ATTACKS) {
			//println('holi, tuve Ã©xito :D')
			// Collect a list of candidates by going through the model
			// EcoreUtil2 provides useful functionality to do that
			// For example searching for all elements within the root Object's tree
			val rootElement = EcoreUtil2.getRootContainer(context)
			val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Attack)
			
			// Create IEObjectDescriptions and puts them into an IScope instance
			return Scopes.scopeFor(candidates)
		}
		//println('badfsdfsdfsdgi')
		return super.getScope(context, reference);
	}
}
