// automatically generated by Xtext
grammar edu.udea.vulnfinder.gram.SecLanguage with org.eclipse.xtext.common.Terminals /*with org.eclipse.xtext.xbase.Xbase*/

import "http://udea/vulnfinder/securityTest" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

SecurityTest returns Test:
	{Test}
	
	'('
	'securityTest' id=EString
		
		('(' 'toes' ( scope=TargetOfEvaluation) ')' )?
		('(' 'attacks' (possibleAttacks+=Attack)+ ')' )?
	')';


TargetOfEvaluation returns TargetOfEvaluation:
	{TargetOfEvaluation}
	'('
		('toe' domain=EString ( components+=WebComponent)* )
	')';

Attack returns Attack:
	{Attack}
	'('
		('attack' name=EAttackMethod ('{' ':level' severity=ESeverity '}')?   )
	')';

EString returns ecore::EString:
	STRING | ID;
	


WebComponent returns WebComponent:
	{WebComponent}
	
	'('
		('page' path=EString ('{' ':target' '[' EString* ']'  '}')? ( inputs+=Input)* )
	')';

Input returns Input:
	{Input}
	'('
		('field' name=EString ('[' EString* ']')?)
	')'; //attacks+=[Attack|ID]+

enum ESeverity returns ESeverity:
	Low = 'Low' | Medium = 'Medium' | High = 'High'
;

enum EAttackMethod returns EAttackMethod:
	SQLInjection = 'SQLInjection' | XSS = 'XSS' | Authentication = 'Authentication' | Authorization = 'Authorization' | PrivilegeScalation = 'PrivilegeScalation'
	;
	